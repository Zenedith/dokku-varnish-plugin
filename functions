#!/bin/bash

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/certs/functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
source "$PLUGIN_AVAILABLE_PATH/domains/functions"

# Const variables
LOCAL_IP="172.17.42.1"
DOCKER_VARNISH_IMAGE="zenedith/varnish"
VARNISH_PORT=80

COMMAND=
APP=

VARNISH_IMAGE=
VARNISH_DIR=

PORT_PROPERTY=
VARNISH_PORT_PROPERTY=
VARNISH_IP_PROPERTY=
CACHE_SIZE_PROPERTY=
THROTTLE_LIMIT_PROPERTY=
GRACE_TTL_PROPERTY=
GRACE_MAX_PROPERTY=
VARNISH_CACHE_SIZE=
VARNISH_THROTTLE_LIMIT=
VARNISH_GRACE_TTL=
VARNISH_GRACE_MAX=

APP_CONTAINER=
APP_PORT=

function check_varnish_container() {
  dokku_log_info1 "Check varnish container"

  if [[ ! -f "$PORT_PROPERTY" ]]; then
    dokku_log_fail "Unknown varnish container"
  fi
}

function check_varnish_dir() {
  dokku_log_verbose "Check varnish dir"

  if [ -z $VARNISH_DIR ]; then
    dokku_log_fail "Call init_common_vars first (VARNISH_DIR not set)"
  fi

  if [ ! -d $VARNISH_DIR ]; then
    mkdir -p $VARNISH_DIR
    chown -R dokku: $VARNISH_DIR
    dokku_log_verbose "Created $VARNISH_DIR"
  else
    dokku_log_verbose "$VARNISH_DIR exists"
  fi
}

function print_help() {
  cat << EOF
    varnish:create <app>, Create a Varnish container
    varnish:delete <app>, Delete specified Varnish container
    varnish:info <app>, Display varnish instance dokku_log_info1rmations
    varnish:list, Display list of Varnish containers
    varnish:logs <app>, Display last logs from Varnish container
EOF
}

function check_app_name() {
  local app_name_param="$1"
  dokku_log_verbose "Check app name: $app_name_param"

  if [ ! -d "$DOKKU_ROOT/$app_name_param" ]; then
    dokku_log_fail "Invalid application name: \"$app_name_param\""
  fi
}

function check_varnish_image() {
  dokku_log_verbose "Check varnish image"
  local image="$1"

  if [[ -z $image ]]; then
    dokku_log_fail "Varnish image not found... Did you run 'dokku plugins-install' ?"
  fi
}

function check_required_params() {
  dokku_log_verbose "Check required params"
  local command_param="$1"
  local app_name_param="$2"

  COMMAND="$command_param"
  dokku_log_verbose "set COMMAND to $COMMAND"

  if [[ $command_param == varnish:* ]]; then
    if [ -z $app_name_param ] && [ "$command_param" != "varnish:list" ]; then
      dokku_log_fail "You must specify an app name for commmand: $command_param"
    else
      check_app_name $app_name_param

      APP="$app_name_param"
      dokku_log_verbose "set APP to $APP"
    fi
  fi
}

function init_vars() {
  dokku_log_verbose "Init vars"

  if [ -z "$APP" ]; then
    init_common_vars
  else
    init_app_vars
  fi
}

function init_common_vars() {
  dokku_log_verbose "Init common vars"
  VARNISH_DIR="$DOKKU_ROOT/.varnish"
  dokku_log_verbose "set VARNISH_DIR to $VARNISH_DIR"
}

function init_app_vars() {
  dokku_log_verbose "Init app vars"
  init_common_vars
  check_varnish_dir

  if [ -z "$APP" ]; then
    dokku_log_fail "Call check_required_params first (APP not set)"
  fi

  VARNISH_IMAGE="varnish/$APP"
  PORT_PROPERTY="$VARNISH_DIR/$APP/port"
  VARNISH_IP_PROPERTY="$VARNISH_DIR/$APP/varnish_ip"
  VARNISH_PORT_PROPERTY="$VARNISH_DIR/$APP/varnish_port"
  VARNISH_BACKEND_IP_PROPERTY="$VARNISH_DIR/$APP/backend_ip"
  CACHE_SIZE_PROPERTY="$VARNISH_DIR/$APP/cache_size"
  THROTTLE_LIMIT_PROPERTY="$VARNISH_DIR/$APP/throttle_limit"
  GRACE_TTL_PROPERTY="$VARNISH_DIR/$APP/grace_ttl"
  GRACE_MAX_PROPERTY="$VARNISH_DIR/$APP/grace_max"

  set +e
  VARNISH_CACHE_SIZE=$(dokku config:get $APP VARNISH_CACHE_SIZE)
  VARNISH_THROTTLE_LIMIT=$(dokku config:get $APP VARNISH_THROTTLE_LIMIT)
  VARNISH_GRACE_TTL=$(dokku config:get $APP VARNISH_GRACE_TTL)
  VARNISH_GRACE_MAX=$(dokku config:get $APP VARNISH_GRACE_MAX)
  set -e


  mkdir -p "$VARNISH_DIR/$APP"

  if [ -z "$VARNISH_CACHE_SIZE" ]; then
    VARNISH_CACHE_SIZE="25MB"
  fi

  echo $VARNISH_CACHE_SIZE > "$CACHE_SIZE_PROPERTY"

  if [ -z "$VARNISH_THROTTLE_LIMIT" ]; then
    VARNISH_THROTTLE_LIMIT="150req/30s"
  fi

  echo $VARNISH_THROTTLE_LIMIT > "$THROTTLE_LIMIT_PROPERTY"

  if [ -z "$VARNISH_GRACE_TTL" ]; then
    VARNISH_GRACE_TTL="30s"
  fi

  echo $VARNISH_GRACE_TTL > "$GRACE_TTL_PROPERTY"

  if [ -z "$VARNISH_GRACE_MAX" ]; then
    VARNISH_GRACE_MAX="1h"
  fi

  echo $VARNISH_GRACE_MAX > "$GRACE_MAX_PROPERTY"

  if (is_deployed "$APP"); then

    APP_CONTAINER=$(get_app_running_container_ids $APP)

    if [ ! -z "$APP_CONTAINER" ]; then
      LOCAL_IP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $APP_CONTAINER)

      APP_PORT=$(echo $(docker inspect --format '{{ .Config.Env }}' ae0237770aa2d4469d9806b15f5f11464978e293117ffe219e19288e5ee04724 2> /dev/null || echo "PORT=5000") | tr ' ' '\n' | grep PORT | sed 's@^.*=@@')

      if [ -z "$APP_PORT" ]; then
        dokku_log_fail "Can't find port for application \"dokku/$APP\" on port 5000"
      fi
    fi
  fi
}


function varnish_create() {
  echo
  dokku_log_info1 "Create varnish instance for $APP"

  # Check if varnish container is installed
  IMAGE=$(docker images | grep "$DOCKER_VARNISH_IMAGE" | awk '{print $3}')
  check_varnish_image "$IMAGE"

  # Fork varnish image
  ID=$(docker run -d "$DOCKER_VARNISH_IMAGE" "/bin/ls")
  docker wait $ID > /dev/null
  IMAGE=$(docker commit $ID)
  docker tag -f "$IMAGE" "$VARNISH_IMAGE"

  # Launch container
  ID=$(docker run -e LISTEN_PORT="$VARNISH_PORT" -e CACHE_SIZE="$VARNISH_CACHE_SIZE" -e THROTTLE_LIMIT="$VARNISH_THROTTLE_LIMIT" -e GRACE_TTL="$VARNISH_GRACE_TTL" -e GRACE_MAX="$VARNISH_GRACE_MAX" -e BACKEND_PORT_${APP_PORT}_TCP_ADDR="$LOCAL_IP" -e BACKEND_ENV_PORT="$APP_PORT" -p $VARNISH_PORT -d $VARNISH_IMAGE /bin/run.sh)
  sleep 4

  # Write port for further usage
  PORT=$(docker port $ID $VARNISH_PORT | sed 's/0.0.0.0://')
  VARNISH_IP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $ID)
  echo $PORT > "$PORT_PROPERTY"
  echo $VARNISH_PORT > "$VARNISH_PORT_PROPERTY"
  echo $VARNISH_IP > "$VARNISH_IP_PROPERTY"
  echo $LOCAL_IP > "$VARNISH_BACKEND_IP_PROPERTY"

  dokku_log_verbose "Varnish container created: $VARNISH_IMAGE"
  sleep 1

  dokku_log_verbose "Wait 10 sec for start varnish instance"
  sleep 10

  dokku_log_verbose "Set nginx to use varnish"

  is_deployed "$APP" && dokku nginx:build-config "$APP" "$VARNISH_PORT" "$VARNISH_IP"
  dokku varnish:info $APP
}

function varnish_info() {
  echo
  dokku_log_info1 "Varnish dokku_log_info1 for $APP"
  check_varnish_container
  local port=$(cat "$PORT_PROPERTY")
  local varnish_port=$(cat "$VARNISH_PORT_PROPERTY")
  local ip=$(cat "$VARNISH_IP_PROPERTY")
  local cache_size=$(cat "$CACHE_SIZE_PROPERTY")
  local throttle_limit=$(cat "$THROTTLE_LIMIT_PROPERTY")
  local grace_ttl=$(cat "$GRACE_TTL_PROPERTY")
  local grace_max=$(cat "$GRACE_MAX_PROPERTY")

  echo
  echo "       Host: $ip"
  echo "       Port: $varnish_port => $port"
  echo
  echo "       Backend IP: $LOCAL_IP"
  echo "       Backend Port: $APP_PORT"
  echo
  echo "       Cache size: $cache_size"
  echo "       Throttle limit: $throttle_limit"
  echo "       Grace ttl: $grace_ttl"
  echo "       Grace max: $grace_max"
}

function get_varnish_id() {
  ID=$(docker ps -a | grep "$VARNISH_IMAGE" | awk '{print $1}' | head -n 1)
  echo $ID
}

function varnish_logs() {
  echo
  dokku_log_info1 "Varnish logs for $APP"
  ID=$(get_varnish_id)
  docker logs $ID | tail -n 100
}

function varnish_list() {
  echo
  dokku_log_info1 "List varnish instances"
  check_varnish_dir
  CONTAINERS=$(ls $VARNISH_DIR/ 2> /dev/null | sed -e 's/_/ /')
  if [[ -z $CONTAINERS ]]; then
    dokku_log_fail "There are no Varnish containers created."
  else
    dokku_log_info1 "Varnish containers:"
    for CONTAINER in $CONTAINERS; do
      echo "  - $CONTAINER"
    done
  fi
}

function varnish_delete() {
  echo
  dokku_log_info1 "Delete varnish for $APP"
  dokku_log_info1 "Restore nginx server port to $APP_PORT and IP $LOCAL_IP"
  is_deployed "$APP" && dokku nginx:build-config "$APP" "$APP_PORT" "$LOCAL_IP"


  ID=$(get_varnish_id)

  # Stop and remove the container
  if [[ ! -z $ID ]]; then
    docker kill $ID > /dev/null
    sleep 1
    docker rm -v $ID > /dev/null
    sleep 1
  fi

  # Remove image
  IMAGE=$(docker images | grep "$VARNISH_IMAGE" | awk '{print $1}')
  if [[ ! -z $IMAGE ]]; then
    docker rmi $IMAGE > /dev/null
  fi

  # Remove container port storage
  if [[ -f "$PORT_PROPERTY" ]]; then
    rm -f "$PORT_PROPERTY"
  fi

  # Remove container external port storage
  if [[ -f "$VARNISH_PORT_PROPERTY" ]]; then
    rm -f "$VARNISH_PORT_PROPERTY"
  fi

  # Remove backend IP storage
  if [[ -f "$VARNISH_BACKEND_IP_PROPERTY" ]]; then
    rm -f "$VARNISH_BACKEND_IP_PROPERTY"
  fi

  # Remove container IP storage
  if [[ -f "$VARNISH_IP_PROPERTY" ]]; then
    rm -f "$VARNISH_IP_PROPERTY"
  fi

  # Remove cache size property
  if [[ -f "$CACHE_SIZE_PROPERTY" ]]; then
    rm -f "$CACHE_SIZE_PROPERTY"
  fi

  # Remove throttle limit property
  if [[ -f "$THROTTLE_LIMIT_PROPERTY" ]]; then
    rm -f "$THROTTLE_LIMIT_PROPERTY"
  fi

  # Remove grace ttl property
  if [[ -f "$GRACE_TTL_PROPERTY" ]]; then
    rm -f "$GRACE_TTL_PROPERTY"
  fi

  # Remove grace max property
  if [[ -f "$GRACE_MAX_PROPERTY" ]]; then
    rm -f "$GRACE_MAX_PROPERTY"
  fi

  dokku_log_verbose "Varnish container deleted: $VARNISH_IMAGE"
}
